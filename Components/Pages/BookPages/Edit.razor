@page "/books/edit"
@using Microsoft.EntityFrameworkCore
@using Blazor_lab1.Data
@inject IDbContextFactory<Blazor_lab1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактирование</PageTitle>

<h1>Редактирование книги</h1>

<hr />
@if (Book is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Book" OnValidSubmit="UpdateBook" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Book.BookId" value="@Book.BookId" />
                <div class="mb-3">
                    <label for="title" class="form-label">Название</label>
                    <InputText id="title" @bind-Value="Book.Title" class="form-control" />
                    <ValidationMessage For="() => Book.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="author" class="form-label">Автор:</label>
                    <InputText id="author" @bind-Value="Book.Author" class="form-control" />
                    <ValidationMessage For="() => Book.Author" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="publicationyear" class="form-label">Год публикации:</label>
                    <InputNumber id="publicationyear" @bind-Value="Book.PublicationYear" class="form-control" />
                    <ValidationMessage For="() => Book.PublicationYear" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="publisher" class="form-label">Издательство:</label>
                    <InputText id="publisher" @bind-Value="Book.Publisher" class="form-control" />
                    <ValidationMessage For="() => Book.Publisher" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categorycode" class="form-label">Категория:</label>
                    <InputText id="categorycode" @bind-Value="Book.CategoryCode" class="form-control" />
                    <ValidationMessage For="() => Book.CategoryCode" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/books">К списку книг</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int BookId { get; set; }

    [SupplyParameterFromForm]
    private Book? Book { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Book ??= await context.Book.FirstOrDefaultAsync(m => m.BookId == BookId);

        if (Book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Book!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BookExists(Book!.BookId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/books");
    }

    private bool BookExists(int bookid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Book.Any(e => e.BookId == bookid);
    }
}
