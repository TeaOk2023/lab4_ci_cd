@page "/rentbooks/edit"
@using Microsoft.EntityFrameworkCore
@using Blazor_lab1.Data
@inject IDbContextFactory<Blazor_lab1.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактирование</PageTitle>

<h1>Редактирование</h1>

<hr />
@if (RentBook is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="RentBook" OnValidSubmit="UpdateRentBook" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="RentBook.RentBookId" value="@RentBook.RentBookId" />
                <div class="mb-3">
                    <label for="rentdate" class="form-label">Дата аренды:</label>
                    <InputDate id="rentdate" @bind-Value="RentBook.RentDate" class="form-control" />
                    <ValidationMessage For="() => RentBook.RentDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="returndate" class="form-label">Дата возврата:</label>
                    <InputDate id="returndate" @bind-Value="RentBook.ReturnDate" class="form-control" />
                    <ValidationMessage For="() => RentBook.ReturnDate" class="text-danger" />
                </div>
                @if (op == 1)
                {
                    <div class="mb-3">
                        <label for="readerid" class="form-label">Читатель:</label>
                        <InputSelect id="readerid" @bind-Value="RentBook.ReaderId" class="form-control">
                            <option value="">...</option>

                            @if (readers != null)
                            {
                                @foreach (var reader in readers)
                                {
                                    <option value="@reader.ReaderId">@reader.LastName @reader.FirstName</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="() => RentBook.ReaderId" class="text-danger" />

                    </div>
                    <input type="hidden" name="RentBook.BookId" id="readerid" @bind="RentBook.BookId" />
                }

                @if (op == 2)
                {
                    <div class="mb-3">
                        <label for="bookid" class="form-label">Книга:</label>
                        <InputSelect id="bookid" @bind-Value="RentBook.BookId" class="form-control">
                            <option value="">...</option>
                            @if (books != null)
                            {
                                @foreach (var book in books)
                                {
                                    <option value="@book.BookId">@book.Title</option>
                                }
                            }
                        </InputSelect>

                        <ValidationMessage For="() => RentBook.BookId" class="text-danger" />
                    </div>
                    <input type="hidden" @bind="RentBook.ReaderId" />
                }
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="@($"rentbooks?id={id}&op={op}")">К списку арендованных книг</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int RentBookId { get; set; }

    [SupplyParameterFromQuery]
    private int? op { get; set; }

    private int? id { get; set; }

    [SupplyParameterFromForm]
    private RentBook? RentBook { get; set; }

    public IEnumerable<Book> books = default!;

    public IEnumerable<Reader> readers = default!;



    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        RentBook ??= await context.RentBook.FirstOrDefaultAsync(m => m.RentBookId == RentBookId);

        if (RentBook is null || op == null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        if (op == 1)
        {
            readers = await context.Reader.ToListAsync();
            id = RentBook!.BookId;
        }
        else
        {
            books = await context.Book.ToListAsync();
            id = RentBook!.ReaderId;
        }
    }

    private async Task UpdateRentBook()
    {
        using var context = DbFactory.CreateDbContext();

            RentBook!.Reader = null;
            RentBook!.Book = null;
  
     
        
        context.Attach(RentBook!).State = EntityState.Modified;
    
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RentBookExists(RentBook!.RentBookId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/rentbooks?id="+id.ToString()+"&op=" + op.ToString());
    }

    private bool RentBookExists(int rentbookid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.RentBook.Any(e => e.RentBookId == rentbookid);
    }
}